关键术语

actual parameter（实际参数）

argument（实参）

caller（调用者）

default argument（默认参数）

divide and conquer（分治）

formal parameters(i.e., parameter) （形式参数（形参））

functions（函数）

function abstraction（函数抽象）

function header（函数头）

global variable（全局变量）

immutable objects（不可变对象）

information hiding（信息隐藏）

keyword arguments（关键字参数）

local variable（局部变量）

None function（None 函数）

paramenters（参数）

pass-by-value（传值）

positional arguments（位置参数）

return value（返回值）

scope of a variable（变量的作用域）

stepwise refinement（逐步求精）

stub(待完善方式)


本章总结

1. 程序模块化和可重用性是软件工程的中心目标之一。函数可以实现这个目标

2. 函数头由关键字def开始，接下来是函数名和形式参数，最后以冒号结束

3. 形式参数是可选的；也就是说，函数可以不包含任何形式参数

4. 无返回值的函数被称为void或None函数

5. 一个return语句可以在void函数中用来终止函数并将程序控制权返回给函数的调用者。有时，这对保证函数控制流正常是非常有用的

6. 传给函数的参数必须和定义在函数里的形参在数目、类型和顺序上保持一致

7. 当程序调用一个函数时，程序的控制权就转移到被调用的函数。当执行到函数的return语句或执行到函数的最后一条语句时，
    被调用的函数就将控制权转给调用者
8. 带返回值函数也可以当作python语句调用。在这种情况下，函数返回值被忽略

9. 函数参数可以当作位置参数或关键字参数传递

10. 当调用一个带形式参数的函数时，实参的值就被传给形参。值传递

11. 函数中创建的变量被称为局部变量。局部变量的作用域从它被创建的位置开始，直到函数返回为止都存在。变量必须在使用前被创建

12. 全局变量被定义在所有函数之外，而且它们可以被所有函数访问

13. python允许用默认参数值定义函数。当无参数调用函数时，默认值就被传给形参

14. python的return语句可以返回多个值

15. 函数抽象时通过将函数的使用和实现分开实现。一个用户可以在不知道函数是如何实现的情况下使用函数。
    函数的实现细节被封装在函数内，并对调用该函数的用户来说是隐藏的。这称为信息隐藏或封装

16. 函数抽象将程序模块化为整齐、分层的形式。程序被写成简洁函数的集合，这样使程序更易于编写、调试、维护和修改。
    这种编写风格会提高函数的可重用性

17.当实现一个大程序时，使用自顶向下或自底向上的编码方法。不要一次性编写整个程序。这个方法似乎要占用更多的编码时间
    （因为要反复地运行这个程序），但它实际上更省时间和更易于调试